{
    "introductions": [
       { "introduction": [
            "<p>Hello World!</p>",
            "<p>Variables are used to store values, to declare them, we use the word <b>let</b> followed by the variable name and the value we want to store. To declare string variables we need to use \"\", for example: <br></br><b>let exampleStr = \"Hello World!\"</b><br></br>And to declare variables of type number we just write the number for example: <br></br><b>let exampleNum = 3</b><br></br> this would mean that example is worth 3.</p> <p>As you can see in the codexpert code editor, you will find a <b>function</b>, where your code needs to be writen. </p> <p>Remember to return the variable that you have used to solve the level. If for example we have created the variable example, we will need to write <b>return example</b> at the end of  the code.</p>"
        ]},
      { "introduction": [
            "<p>We use Arithmetic Operators to perform operations such as addition, subtraction, multiplication… Now you will learn the ones that are used the most!</p><p> Addition, Subtraction, Increment and Decrement</p><p>  - The <b>addition</b> operator is (+). For example: x + y;</p><p>  - The <b>subtraction</b> operator is (-). For example: x - y;</p><p>  - To increment a number by one we use the operator (++). For example: x++ is the same as x = x + 1;</p><p>  - To <b>decrement</b> a number by one be user the operator (--). For example: x--  is the same as x = x - 1;</p>",
            "<p>Multiplication, Exponentiation, Division and Modulus</p><p>  - To <b>multiply</b> two numbers we use the operator (*). For example: x * y;</p><p>  - The <b>exponentiation</b> operator (**) raises the first operand to the power of the second operand. For example x ** y, it’s also the same as Math.pow(x,y).</p><p>  - To <b>divide</b> two numbers use the operator (/). For example: x / y;<p>  - To obtain the remainder of a division of two numbers use the <b>modulus</b> operator (%). For example: x % y;</p>"
        ]},
      { "introduction": [
            "<p>Before we start, you need to know that a boolean value is one that can either be true or false. Conditional statements are used to decide how the code will act depending on if the given condition is true or false. For example, if a condition is true we redirect the user to the landing page, else, we redirect to the login page. In Javascript it would look like this:</p> <p>if (condition) {</p><p>redirect to the landing page</p><p>} else {</p><p>redirect to the login page</p><p>}</p>",
            "<p>Where condition could be for example, if a given number is equal to 0, it would look like this: if (givenNumber == 0).</p><p>To compare numbers we use the operator == or !=, the first operator will return true if the two numbers we are comparing are the same, for example: 3 == 3. The second operator will return true if the numbers are different, for example: 3 != 4. We can also compare if a number is bigger/lower than another number. For example 3 < 4 equals true. If we add an equal to it the number can be bigger/lower than or equal, for example: 3 >= 3 equals true.</p>"
        ]},
      { "introduction": [
            "<p>An array is an object that can store a collection of items. If for example we want to store data for 20 employees we would need to declare a variable for each employee, with arrays we can store everything in one variable. Arrays look like this: let colors = [“green”, “blue”, “red”]. Each position of the array is known as “<b>index</b>”, we start counting on 0, therefore, index 0 of colors is <b>green</b> and in Javascript it looks like this: colors[0].</p>"
        ]},
      { "introduction": [
            "<p>If we need to execute the code for many elements, we use loops to execute the same code X amount of times. To do so, we have different loops, we use: for, do while and while.</p>",
            "<h3>for loop</h3><p>for (<span className='word__green'>statement1</span>; <span className='word__blue'>statement2</span>; <span className='word__pink'>statement3</span>) {</p><p>lines of code to be executed</p><p>}</p><p><span className='word__green'>Statement1</span> is the starting point, here we assign a variable to iterate in the loop, <span className='word__blue'>statement2</span> is the condition that will make the code execute, and <span className='word__pink'>statement3</span> is how much we increment or decrement the variable declared in <span className='word__green'>statement1</span>.</p><p>We usually use <b>i = 0</b> for statement 1 (i for index), <b>i < exampleVariable</b> for statement2 and <b>i++</b> for <span className='word__pink'>statement3</span>.</p><p>This would mean that we use the variables i as our starting point, and exampleVariable as our ending.  If we translate this for we get that our starting point is 0 (<span className='word__green'>statement1</span>), our code will execute while i is smaller than exampleVariable (<span className='word__blue'>statement2</span>), and for each time the code is executed we add up 1 to i (<span className='word__pink'>statement3</span>).</p><p>for (let i = 0; i < input.length; i++) {</p><p>lines of code to be executed</p><p>}</p>",
            "<h3>while loop</h3><p>The while loop is executed <b>while</b> a condition remains true, for example:</p><p>let i = 0;</p><p><b>while(i < 3)</b> {</p><p>lines of code to be executed</p><p>i++;</p><p>}</p><p>This means that we will execute the code while the variable i in this case is smaller than 3. In this case, it first checks if the condition is true and then executes the code.</p>",
            "<h3>do…while loop</h3><p>The difference between the while loop and the do while loop is that in the do while loop the code is executed once before checking if the condition is met. For example:</p><p>let i = 0;</p><p>do {</p><p>block of code to be executed</p><p>i++;</p><p>} while (i < 3)</p>"
        ]},
      { "introduction": [
            "<p>There is no introduction for the final level.<b>:P</b></p>"
        ]}
    ],
    "hints": [
      "This is the hint!",
      "<p>First you need to declare a variable, then use the <b>assign operator</b> from lesson 0 to <b>assign 3</b> to it. And then <b>using the addition operator</b> add the variable input</p>",
      "<p>To assign true or false, we simply write example = true, we don’t need to use quotation marks for true or false because they are a boolean expression, not a string.</p>",
      "<p>Remember that the index of arrays <b>starts counting on 0</b>, therefore the first element of an array is not index = 1 but index = 0.</p>",
      "<p>First we need to determine the length of the array with <b>input.length</b>. We can save this length in a variable for example. We want to declare another variable where we will add each number of the array inside, we can name it for example additionVariable. What we want to do is, execute the addition code inside a loop, get the current value from the variable additionVariable and add the current value from the array with <b>input[i]</b> where i is the index that will increment each time the code is executed, like in the examples shown before. Our starting point will be 0 and our ending point will be the <b>input.length</b>.</p>",
      "<p>There is no hint for the final level. <b>:P</b></p>"
    ]
}